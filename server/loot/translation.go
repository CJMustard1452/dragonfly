package loot

import (
	"github.com/df-mc/dragonfly/server/item/enchantment"
	"github.com/df-mc/dragonfly/server/item/potion"
	"github.com/df-mc/dragonfly/server/world"
)

var itemAliases = map[string]string{
	"minecraft:appleEnchanted":           "minecraft:enchanted_golden_apple",
	"minecraft:fireball":                 "minecraft:fire_charge",
	"minecraft:leather_horse_armor":      "minecraft:horsearmorleather",
	"minecraft:golden_horse_armor":       "minecraft:horsearmorgold",
	"minecraft:iron_horse_armor":         "minecraft:horsearmoriron",
	"minecraft:diamond_horse_armor":      "minecraft:horsearmordiamond",
	"minecraft:record_13":                "minecraft:music_disc_13",
	"minecraft:record_cat":               "minecraft:music_disc_cat",
	"minecraft:record_blocks":            "minecraft:music_disc_blocks",
	"minecraft:record_chirp":             "minecraft:music_disc_chirp",
	"minecraft:record_far":               "minecraft:music_disc_far",
	"minecraft:record_mall":              "minecraft:music_disc_mall",
	"minecraft:record_mellohi":           "minecraft:music_disc_mellohi",
	"minecraft:record_stal":              "minecraft:music_disc_stal",
	"minecraft:record_strad":             "minecraft:music_disc_strad",
	"minecraft:record_ward":              "minecraft:music_disc_ward",
	"minecraft:record_11":                "minecraft:music_disc_11",
	"minecraft:record_wait":              "minecraft:music_disc_wait",
	"minecraft:record_otherside":         "minecraft:music_disc_otherside",
	"minecraft:record_pigstep":           "minecraft:music_disc_pigstep",
	"minecraft:record_5":                 "minecraft:music_disc_5",
	"minecraft:record_relic":             "minecraft:music_disc_relic",
	"minecraft:record_creator":           "minecraft:music_disc_creator",
	"minecraft:record_creator_music_box": "minecraft:music_disc_creator_music_box",
	"minecraft:record_precipice":         "minecraft:music_disc_precipice",
}

func itemByName(name string, meta int16) (world.Item, bool) {
	n, ok := itemAliases[name]
	if ok {
		name = n
	}
	return world.ItemByName(name, meta)
}

var enchantmentStringIds = map[string]int{
	"protection":            enchantment.IDProtection,
	"fire_protection":       enchantment.IDFireProtection,
	"feather_falling":       enchantment.IDFeatherFalling,
	"blast_protection":      enchantment.IDBlastProtection,
	"projectile_protection": enchantment.IDProjectileProtection,
	"thorns":                enchantment.IDThorns,
	"respiration":           enchantment.IDRespiration,
	"depth_strider":         enchantment.IDDepthStrider,
	"aqua_affinity":         enchantment.IDAquaAffinity,
	"sharpness":             enchantment.IDSharpness,
	"smite":                 enchantment.IDSmite,
	"bane_of_arthropods":    enchantment.IDBaneOfArthropods,
	"knockback":             enchantment.IDKnockback,
	"fire_aspect":           enchantment.IDFireAspect,
	"looting":               enchantment.IDLooting,
	"efficiency":            enchantment.IDEfficiency,
	"silk_touch":            enchantment.IDSilkTouch,
	"unbreaking":            enchantment.IDUnbreaking,
	"fortune":               enchantment.IDFortune,
	"power":                 enchantment.IDPower,
	"punch":                 enchantment.IDPunch,
	"flame":                 enchantment.IDFlame,
	"infinity":              enchantment.IDInfinity,
	"luck_of_the_sea":       enchantment.IDLuckOfTheSea,
	"lure":                  enchantment.IDLure,
	"frost_walker":          enchantment.IDFrostWalker,
	"mending":               enchantment.IDMending,
	"binding":               enchantment.IDCurseOfBinding,
	"vanishing":             enchantment.IDCurseOfVanishing,
	"impaling":              enchantment.IDImpaling,
	"riptide":               enchantment.IDRiptide,
	"loyalty":               enchantment.IDLoyalty,
	"channeling":            enchantment.IDChanneling,
	"multishot":             enchantment.IDMultishot,
	"piercing":              enchantment.IDPiercing,
	"quick_charge":          enchantment.IDQuickCharge,
	"soul_speed":            enchantment.IDSoulSpeed,
	"swift_sneak":           enchantment.IDSwiftSneak,
	"wind_burst":            enchantment.IDWindBurst,
	"density":               enchantment.IDDensity,
	"breach":                enchantment.IDBreach,
}

var potionNames = map[string]potion.Potion{
	"water":                potion.Water(),
	"mundane":              potion.Mundane(),
	"thick":                potion.Thick(),
	"awkward":              potion.Awkward(),
	"night_vision":         potion.NightVision(),
	"long_night_vision":    potion.LongNightVision(),
	"invisibility":         potion.Invisibility(),
	"long_invisibility":    potion.LongInvisibility(),
	"leaping":              potion.Leaping(),
	"strong_leaping":       potion.StrongLeaping(),
	"long_leaping":         potion.LongLeaping(),
	"fire_resistance":      potion.FireResistance(),
	"long_fire_resistance": potion.LongFireResistance(),
	"swiftness":            potion.Swiftness(),
	"strong_swiftness":     potion.StrongSwiftness(),
	"long_swiftness":       potion.LongSwiftness(),
	"slowness":             potion.Slowness(),
	"strong_slowness":      potion.StrongSlowness(),
	"long_slowness":        potion.LongSlowness(),
	"water_breathing":      potion.WaterBreathing(),
	"long_water_breathing": potion.LongWaterBreathing(),
	"healing":              potion.Healing(),
	"strong_healing":       potion.StrongHealing(),
	"harming":              potion.Harming(),
	"strong_harming":       potion.StrongHarming(),
	"poison":               potion.Poison(),
	"strong_poison":        potion.StrongPoison(),
	"long_poison":          potion.LongPoison(),
	"regeneration":         potion.Regeneration(),
	"strong_regeneration":  potion.StrongRegeneration(),
	"strength":             potion.Strength(),
	"strong_strength":      potion.StrongStrength(),
	"long_strength":        potion.LongStrength(),
	"weakness":             potion.Weakness(),
	"long_weakness":        potion.LongWeakness(),
	"turtle_master":        potion.TurtleMaster(),
	"strong_turtle_master": potion.StrongTurtleMaster(),
	"long_turtle_master":   potion.LongTurtleMaster(),
	"slow_falling":         potion.SlowFalling(),
	"long_slow_falling":    potion.LongSlowFalling(),
}
